// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // x1 = if zx=0 then x else 0 
    //Not16(in=x,out=notx);
    //And16(a=x,b=notx,out=zero16);
    //Mux16(a=x,b=zero16,sel=zx,out=x1);
    Mux16(a=x,sel=zx,out=x1);

    // x2 = if nx=0 then x else not x 
    Not16(in=x1,out=notx1);
    Mux16(a=x1,b=notx1,sel=nx,out=x2);

    // y1 = if zy=0 then y else 0
    //Not16(in=y,out=noty);
    // Mux16(a=y,b=zero16,sel=zy,out=y1);
    Mux16(a=y,sel=zy,out=y1);

    // y2 = if ny=0 then y else not y 
    Not16(in=y1,out=noty1);
    Mux16(a=y1,b=noty1,sel=ny,out=y2);

    // out1 = if f=0 then and x2&y2 else x2+y2 
    Add16(a=x2,b=y2,out=xyPlus);
    And16(a=x2,b=y2,out=xyAnd);
    Mux16(a=xyAnd,b=xyPlus,sel=f,out=result);

    // out = if no=0 then result else not result
    Not16(in=result,out=notresult);
    Mux16(a=result,b=notresult,sel=no,out=out, out[15]=firstOut, out[0..7]=leftOut, out[8..15]=rightOut);
    
    // zr = if out=zero16 then 0 else 1
    //Or16Way(in=result,out=zr);
    Or8Way(in=leftOut,out=l);
    Or8Way(in=rightOut,out=r);
    Or(a=l,b=r,out=nzr);
    Not(in=nzr,out=zr);
    
    // ng = if firstOut=1 then 1 else 0
    And(a=firstOut,b=true,out=ng);

}
